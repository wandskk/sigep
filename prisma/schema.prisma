generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum para os diferentes tipos de usuários
enum UserRole {
  ALUNO
  PROFESSOR
  GESTOR
  SECRETARIA
  ADMIN
}

// Enum para os turnos das turmas
enum Turno {
  MATUTINO
  VESPERTINO
  NOTURNO
}

// Enum para os tipos de notas
enum TipoNota {
  PROVA
  TRABALHO
  EXERCICIO
}

// Enum para os bimestres
enum Bimestre {
  PRIMEIRO
  SEGUNDO
  TERCEIRO
  QUARTO
}

// Enum para o sexo do aluno
enum Sexo {
  M
  F
  OUTRO
}

// Enum para a situação do aluno
enum Situacao {
  ATIVO
  TRANSFERIDO
  EVADIDO
  CONCLUIDO
}

// Enum para o parentesco do responsável
enum Parentesco {
  PAI
  MAE
  AVO
  TIO
  OUTRO
}

// Enum para os tipos de ocorrências
enum TipoOcorrencia {
  ADVERTENCIA
  ELOGIO
  COMUNICADO
  OUTRO
}

// Modelo de usuário para autenticação
model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String
  role          UserRole  @default(ALUNO)
  image         String?
  firstLogin    Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts   Account[]
  sessions   Session[]
  aluno      Aluno?
  professor  Professor?
  gestor     Gestor?
  secretaria Secretaria?
  ocorrenciasRegistradas Ocorrencia[]  @relation("AutorOcorrencia")

  @@map("users")
}

// Modelo para contas conectadas (caso seja usado OAuth)
model Account {
  id                String   @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// Modelo para sessões de usuário
model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Modelo para verificação de email
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Modelo para recuperação de senha
model PasswordReset {
  id        String   @id @default(uuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  @@map("password_resets")
}

// Modelo para responsáveis
model Responsavel {
  id        String     @id @default(cuid())
  nome      String
  cpf       String     @unique
  email     String
  telefone  String
  endereco  String
  parentesco Parentesco
  aluno     Aluno      @relation(fields: [alunoId], references: [id], onDelete: Cascade)
  alunoId   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([alunoId])
}

// Modelo para alunos
model Aluno {
  id             String    @id @default(uuid())
  userId         String    @unique
  matricula      String    @unique
  dataNascimento DateTime
  sexo           Sexo
  cpf            String?   @unique
  nis            String?   @unique
  endereco       String
  cidade         String
  estado         String
  cep            String
  telefone       String?
  email          String?
  nomeMae        String
  nomePai        String?
  dataMatricula  DateTime
  situacao       Situacao  @default(ATIVO)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  ocorrencias    Ocorrencia[]

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  responsaveis Responsavel[]
  turmas       AlunoTurma[]

  @@map("alunos")
}

// Modelo para professores
model Professor {
  id            String   @id @default(uuid())
  userId        String   @unique
  formacao      String?
  especialidade String?
  escolaId      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  escola       School?        @relation(fields: [escolaId], references: [id])
  turmas       ProfessorTurma[]

  @@map("professores")
}

// Modelo para gestores escolares
model Gestor {
  id        String   @id @default(uuid())
  userId    String   @unique
  cargo     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  escolas   School[]

  @@map("gestores")
}

// Modelo para funcionários da secretaria de educação
model Secretaria {
  id           String   @id @default(uuid())
  userId       String   @unique
  departamento String?
  cargo        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("secretaria")
}

// Modelo para escolas
model School {
  id        String   @id @default(uuid())
  name      String
  address   String
  city      String
  state     String
  email     String   @unique
  phone     String
  website   String?
  gestorId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ocorrencias Ocorrencia[]

  gestor      Gestor?     @relation(fields: [gestorId], references: [id])
  turmas      Turma[]
  disciplinas Disciplina[]
  professores Professor[]

  @@map("schools")
}

// Modelo para turmas
model Turma {
  id        String   @id @default(uuid())
  nome      String
  codigo    String   @unique
  turno     Turno
  escolaId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  escola      School       @relation(fields: [escolaId], references: [id])
  professores ProfessorTurma[]
  alunos      AlunoTurma[]
  disciplinas DisciplinaTurma[]

  @@map("turmas")
}

// Modelo para disciplinas
model Disciplina {
  id           String   @id @default(uuid())
  nome         String
  codigo       String   @unique
  escolaId     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  escola       School   @relation(fields: [escolaId], references: [id])
  turmas       DisciplinaTurma[]
  professores  ProfessorDisciplinaTurma[]
  notas        Nota[]
  presencas    Presenca[]

  @@map("disciplinas")
}

// Modelo para relação entre Professor e Turma
model ProfessorTurma {
  id           String   @id @default(uuid())
  professorId  String
  turmaId      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  professor    Professor @relation(fields: [professorId], references: [id], onDelete: Cascade)
  turma        Turma     @relation(fields: [turmaId], references: [id], onDelete: Cascade)

  disciplinas  ProfessorDisciplinaTurma[]

  @@unique([professorId, turmaId])
  @@map("professor_turma")
}

// Modelo para relação entre Professor, Disciplina e Turma
model ProfessorDisciplinaTurma {
  id                String   @id @default(uuid())
  professorTurmaId  String
  disciplinaId      String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  professorTurma    ProfessorTurma @relation(fields: [professorTurmaId], references: [id], onDelete: Cascade)
  disciplina        Disciplina      @relation(fields: [disciplinaId], references: [id], onDelete: Cascade)

  @@unique([professorTurmaId, disciplinaId])
  @@map("professor_disciplina_turma")
}

// Modelo para relação entre Aluno e Turma
model AlunoTurma {
  id        String   @id @default(uuid())
  alunoId   String
  turmaId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  aluno      Aluno @relation(fields: [alunoId], references: [id], onDelete: Cascade)
  turma      Turma @relation(fields: [turmaId], references: [id], onDelete: Cascade)
  presencas  Presenca[]
  notas      Nota[]

  @@unique([alunoId, turmaId])
  @@map("aluno_turma")
}

// Modelo para relação entre Turma e Disciplina
model DisciplinaTurma {
  id           String   @id @default(uuid())
  disciplinaId String
  turmaId      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  disciplina   Disciplina @relation(fields: [disciplinaId], references: [id], onDelete: Cascade)
  turma        Turma      @relation(fields: [turmaId], references: [id], onDelete: Cascade)

  @@unique([disciplinaId, turmaId])
  @@map("disciplina_turma")
}

// Modelo para registro de presença
model Presenca {
  id           String   @id @default(uuid())
  alunoTurmaId String
  disciplinaId String
  data         DateTime
  presente     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  alunoTurma   AlunoTurma   @relation(fields: [alunoTurmaId], references: [id], onDelete: Cascade)
  disciplina   Disciplina   @relation(fields: [disciplinaId], references: [id], onDelete: Cascade)

  @@unique([alunoTurmaId, disciplinaId, data])
  @@map("presencas")
}

// Modelo para registro de notas
model Nota {
  id           String    @id @default(uuid())
  alunoTurmaId String
  disciplinaId String
  data         DateTime
  valor        Float
  tipo         TipoNota
  bimestre     Bimestre
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  alunoTurma   AlunoTurma   @relation(fields: [alunoTurmaId], references: [id], onDelete: Cascade)
  disciplina   Disciplina   @relation(fields: [disciplinaId], references: [id], onDelete: Cascade)

  @@unique([alunoTurmaId, disciplinaId, tipo, bimestre, data])
  @@map("notas")
}

// Modelo para ocorrências
model Ocorrencia {
  id                    String         @id @default(uuid())
  aluno                 Aluno          @relation(fields: [alunoId], references: [id])
  alunoId               String
  escola                School         @relation(fields: [escolaId], references: [id])
  escolaId              String
  autor                 User           @relation("AutorOcorrencia", fields: [autorId], references: [id])
  autorId               String
  tipo                  TipoOcorrencia
  titulo                String
  descricao             String
  dataOcorrencia        DateTime
  dataRegistro          DateTime       @default(now())
  visivelParaResponsavel Boolean       @default(false)

  @@index([alunoId])
  @@index([escolaId])
  @@index([autorId])
}
