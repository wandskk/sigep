// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum para os diferentes tipos de usuários
enum UserRole {
  ALUNO
  PROFESSOR
  GESTOR
  SECRETARIA
  ADMIN
}

// Modelo de usuário para autenticação
model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String
  role          UserRole  @default(ALUNO)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts   Account[]
  sessions   Session[]
  aluno      Aluno?
  professor  Professor?
  gestor     Gestor?
  secretaria Secretaria?

  @@map("users")
}

// Modelo para contas conectadas (caso seja usado OAuth)
model Account {
  id                String   @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// Modelo para sessões de usuário
model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Modelo para verificação de email
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Modelo para recuperação de senha
model PasswordReset {
  id        String   @id @default(uuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  @@map("password_resets")
}

// Modelo para alunos
model Aluno {
  id             String   @id @default(uuid())
  userId         String   @unique
  matricula      String   @unique
  dataNascimento DateTime
  responsavel    String?
  telefone       String?
  endereco       String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("alunos")
}

// Modelo para professores
model Professor {
  id            String   @id @default(uuid())
  userId        String   @unique
  formacao      String?
  especialidade String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("professores")
}

// Modelo para gestores escolares
model Gestor {
  id        String   @id @default(uuid())
  userId    String   @unique
  cargo     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("gestores")
}

// Modelo para funcionários da secretaria de educação
model Secretaria {
  id           String   @id @default(uuid())
  userId       String   @unique
  departamento String?
  cargo        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("secretaria")
}
