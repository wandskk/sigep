// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
  previewFeatures = ["multiSchema", "extendedWhereUnique"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelos para autenticação (NextAuth)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  hashedPassword String?
  image          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  roleId         String

  accounts     Account[]
  sessions     Session[]
  role         Role       @relation(fields: [roleId], references: [id])
  professor    Professor?
  aluno        Aluno?
  gestor       Gestor?
  secretaria   Secretaria?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Modelos para controle de acesso (RBAC)
model Role {
  id           String @id @default(cuid())
  name         String @unique
  description  String
  permissions  String[]
  users        User[]
}

// Modelos específicos para cada perfil de usuário
model Professor {
  id                String @id @default(cuid())
  userId            String @unique
  matricula         String @unique
  titulacao         String?
  areaConcurso      String?
  dataAdmissao      DateTime?
  
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)
  // Relacionamentos adicionais serão implementados nos próximos módulos
}

model Aluno {
  id                String @id @default(cuid())
  userId            String @unique
  matricula         String @unique
  dataNascimento    DateTime
  responsavel       String?
  telefoneResponsavel String?
  
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)
  // Relacionamentos adicionais serão implementados nos próximos módulos
}

model Gestor {
  id                String @id @default(cuid())
  userId            String @unique
  cargo             String
  
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)
  // Relacionamentos adicionais serão implementados nos próximos módulos
}

model Secretaria {
  id                String @id @default(cuid())
  userId            String @unique
  departamento      String
  cargo             String
  
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)
  // Relacionamentos adicionais serão implementados nos próximos módulos
}
